# CircleCI 2.0 configuration file for this project.
#
# Notes:
#   - Do not use CircleCI's brand of Docker images unless it is for a secondary environment.
#   - We chose not to use dependencies caching because it is complicated to do it right and it is
#     not worth the effort for a project so small.
#
# For more information check out:
#   - https://circleci.com/docs/2.0/language-python/ for more details
#   - https://circleci.com/docs/2.0/configuration-reference/
#
version: "2.1"

jobs:
  test:
    parameters:
      python_version:
        type: string

    docker:
      - image: python:<< parameters.python_version >>

      # Service container available at `host: localhost`.
      - image: circleci/postgres:12.3
        environment:
          POSTGRES_USER: django_dev
          POSTGRES_PASSWORD: django_dev
          POSTGRES_DB: accounts_dev_test

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade setuptools wheel
            pip install -r requirements_test.txt

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make lint

            # Set Tox environment to the installed Python version.
            TOXENV=$(
              python -c 'import sys; v = sys.version_info; print("py{}{}".format(v.major, v.minor))'
            )

            tox -e "$TOXENV"

            codecov
            make test-coverage-report-console
            make test-coverage-report-html

      - store_artifacts:
          path: test-reports
          destination: test-reports

  dist:
    docker:
      - image: python:3.7.2

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade setuptools wheel
            pip install -r requirements_release.txt

      - run:
          name: make dist
          command: |
            . venv/bin/activate
            make dist

      - store_artifacts:
          path: dist
          destination: dist

workflows:
  version: 2
  ci:
    jobs:
      - test:
          matrix:
            parameters:
              python_version:
                - "3.6.7"
                - "3.7.2"
                - "3.8.2" # Ubuntu 20.04 LTS
                - "3.8.3" # Latest version
      - dist
